# -*- coding: utf-8 -*-
"""check_rhyme_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WqcCOyWJnTPQ9hgKUW55Lt8VjLR9auua
"""

import re
import os
import json
import copy

huyen = ['à', 'ằ', 'ầ', 'è', 'ề', 'ò','ồ', 'ờ', 'ì', 'ù', 'ừ', 'ỳ']
sac = ['á', 'ắ', 'ấ', 'é', 'ế', 'ó','ố' , 'ớ', 'í', 'ú', 'ứ', 'ý']
nang = ['ạ', 'ặ', 'ậ', 'ẹ', 'ệ', 'ọ', 'ộ', 'ợ', 'ị', 'ụ', 'ự', 'ỵ']
hoi = ['ả', 'ẳ', 'ẩ', 'ẻ', 'ể', 'ỏ', 'ổ', 'ở', 'ỉ', 'ủ', 'ử', 'ỷ']
nga = ['ã', 'ẵ', 'ẫ', 'ẽ', 'ễ', 'õ', 'ỗ', 'ỡ', 'ĩ', 'ũ', 'ữ', 'ỹ']
khong_dau = ['a', 'ă', 'â', 'e', 'ê', 'o', 'ô', 'ơ', 'i', 'u', 'ư', 'y']

list_start_vowels = []
list_start_vowels.extend(huyen)
list_start_vowels.extend(sac)
list_start_vowels.extend(nang)
list_start_vowels.extend(hoi)
list_start_vowels.extend(nga)
list_start_vowels.extend(khong_dau)

dict_path = "../visualize/rhyme_.txt"

import ast
def txtToDict(dict_path: str):

  input = open(dict_path,"r")
  contents = input.read()
  res = ast.literal_eval(contents)

  return res

rhymes_dict = txtToDict(dict_path)

# print(type(rhymes_dict["ay"]))



def splitWord(word):
  word_length = len(word)
  start_index = 0
  prev = ''
  for i in range(word_length):
    if prev == 'g' and word[i] == 'i':
      continue
    if word[i] in list_start_vowels:
      start_index = i
      break
    prev = word[i]
  return word[i:]

def compare(word1: str, word2: str):

  rhyme1 = splitWord(word1)
  rhyme2 = splitWord(word2)

  for i in rhymes_dict[rhyme1]:
    if i == rhyme2:
      return True
  return False

def merge(list_words: list, connection: str):
  res = ""
  for word in list_words:
    if res == "":
      res = list_words[0]
    else:
      res = res + connection + word
  return res

def checkRhymeByPair(prev_sentence: str, cur_sentence: str, prev_eight_words_rhyme = "" ):

  prev_words = prev_sentence.split(" ")
  prev_length = len(prev_words)
  cur_words = cur_sentence.split(" ")
  cur_length = len(cur_words)

  rhyme_errors = 0
  length_errors = 0

  if(prev_length != 6):
      prev_sentence = "(L)" + prev_sentence
      length_errors = length_errors +1

  if(cur_length != 8):
      cur_length = "(L)" + cur_length
      length_errors = length_errors +1

  if prev_eight_words_rhyme == "":
    if not compare(prev_words[-1], cur_words[5]):
      cur_words[5]  = cur_words[5] + "(V)"
      rhyme_errors = rhyme_errors + 1

  if prev_eight_words_rhyme != "":
    if not compare(prev_words[5], prev_eight_words_rhyme):
      prev_words[5]  = prev_words[5] + "(V)"
      rhyme_errors = rhyme_errors + 1

    if not compare(prev_eight_words_rhyme, cur_words[5]):
      cur_words[5]  = cur_words[5] + "(V)"
      rhyme_errors = rhyme_errors + 1

  return merge(prev_words, " "), merge(cur_words," "), splitWord(cur_words[-1]), rhyme_errors, length_errors

def count_rhyme(poem:str):
  num_line = len(poem.split('\n'))
  num_rhymes = num_line-1

  return num_rhymes

def checkRhymeByStanza(stanza: str):
  sentences = stanza.split("\n")
  # print(stanza)
  first_words = sentences[0].split(" ")
  start_index = 0
  prev_eight_words_rhyme = ""
  total_rhyme_errors = 0
  total_length_errors = 0
  res = ""

  if len(first_words) == 8:
    prev_eight_words_rhyme = splitWord(first_words[8])
    start_index = 1

  for i in range(start_index, len(sentences), 2):
    sentences[i], sentences[i+1],prev_eight_words_rhyme,rhyme_errors, length_errors  = checkRhymeByPair(sentences[i], sentences[i+1],prev_eight_words_rhyme )
    total_rhyme_errors = total_rhyme_errors + rhyme_errors
    total_length_errors = total_length_errors + length_errors
  res = merge(sentences, "\n")
  total_rhyme = (count_rhyme(stanza)) * 2

  return res, total_rhyme_errors, total_rhyme, total_length_errors

if __name__ == '__main__':
    res, total_rhyme_errors, total_rhyme,total_length_errors = checkRhymeByStanza('chào xuân đẹp có mai đào\nmai đào nở nụ đón chào hồi xuân\nnay về mai nở nụ mai\nbánh chưng bánh trái đất trời ấm thân')
    print('*' * 20)
    print(res)
    print(total_rhyme)
    print(total_length_errors)
    print(total_rhyme_errors)
